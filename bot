"""Telegram bot using aiogram3 and Google GenAI (Gemini‚Äë2.5‚ÄëFlash‚ÄëPreview‚Äë05‚Äë20).
Features:
  ‚Ä¢ ThinkingBudget control
  ‚Ä¢ Dynamic temperature & top_p adjustment
  ‚Ä¢ Google Custom Search integration (\u200e/search)
  ‚Ä¢ Context reset (\u200e/reset)
  ‚Ä¢ Image understanding (send photo)
Environment vars required:
  BOT_TOKEN           ‚Äì Telegram Bot token
  GOOGLE_API_KEY      ‚Äì Google AI & Programmable Search key
  GOOGLE_CSE_ID       ‚Äì Custom Search Engine CX
"""
import asyncio
import logging
import os
from io import BytesIO
from typing import Dict, Any

import google.generativeai as genai
import httpx
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils.chat_action import ChatActionMiddleware

# ---- Logging & basic config --------------------------------------------------
logging.basicConfig(level=logging.INFO)
BOT_TOKEN = os.getenv("BOT_TOKEN")
GENAI_KEY = os.getenv("GOOGLE_API_KEY")
CSE_ID = os.getenv("GOOGLE_CSE_ID")

if not (BOT_TOKEN and GENAI_KEY):
    raise RuntimeError("BOT_TOKEN and GOOGLE_API_KEY must be set in env")

genai.configure(api_key=GENAI_KEY)

# ---- Per‚Äëuser session storage -------------------------------------------------
Session = Dict[str, Any]
user_sessions: Dict[int, Session] = {}

def new_session() -> Session:
    model = genai.GenerativeModel(
        "gemini-2.5-flash-preview-05-20",
        generation_config={
            "temperature": 0.3,
            "top_p": 0.9,
        },
    )
    return {
        "model": model,
        "chat": model.start_chat(history=[]),
        "temperature": 0.3,
        "top_p": 0.9,
        "thinking_budget": 4096,
    }

def get_session(uid: int) -> Session:
    if uid not in user_sessions:
        user_sessions[uid] = new_session()
    return user_sessions[uid]

# ---- Google search helper ----------------------------------------------------
async def google_search(query: str, n: int = 3) -> str:
    url = "https://www.googleapis.com/customsearch/v1"
    params = {"q": query, "key": GENAI_KEY, "cx": CSE_ID, "num": n}
    async with httpx.AsyncClient(timeout=15) as client:
        r = await client.get(url, params=params)
        r.raise_for_status()
        items = r.json().get("items", [])
        if not items:
            return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        return "\n\n".join(f"<b>{it['title']}</b>\n{it['link']}" for it in items)

# ---- Aiogram setup -----------------------------------------------------------
bot = Bot(BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
dp.message.middleware(ChatActionMiddleware())

# ---- Command handlers --------------------------------------------------------
@dp.message(Command("start"))
async def cmd_start(msg: types.Message):
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Gemini‚ÄëFlash –±–æ—Ç. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/search q ‚Äì –ø–æ–∏—Å–∫ Google\n"
        "/set_temp 0‚Äë2 ‚Äì —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞\n"
        "/set_top_p 0‚Äë1 ‚Äì top_p\n"
        "/set_budget N ‚Äì thinkingBudget (0‚Äì24576)\n"
        "/reset ‚Äì –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç"
    )

@dp.message(Command("reset"))
async def cmd_reset(msg: types.Message):
    user_sessions.pop(msg.from_user.id, None)
    await msg.answer("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω.")

@dp.message(Command("set_temp"))
async def cmd_set_temp(msg: types.Message, command: Command):
    try:
        value = float(command.args)
        assert 0 <= value <= 2
    except (TypeError, ValueError, AssertionError):
        return await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 0‚Äë2, –Ω–∞–ø—Ä–∏–º–µ—Ä /set_temp 0.7")
    sess = get_session(msg.from_user.id)
    sess["temperature"] = value
    await msg.answer(f"temperature = {value}")

@dp.message(Command("set_top_p"))
async def cmd_set_top_p(msg: types.Message, command: Command):
    try:
        value = float(command.args)
        assert 0 <= value <= 1
    except (TypeError, ValueError, AssertionError):
        return await msg.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ 0‚Äë1, –Ω–∞–ø—Ä–∏–º–µ—Ä /set_top_p 0.8")
    sess = get_session(msg.from_user.id)
    sess["top_p"] = value
    await msg.answer(f"top_p = {value}")

@dp.message(Command("set_budget"))
async def cmd_set_budget(msg: types.Message, command: Command):
    try:
        value = int(command.args)
        assert 0 <= value <= 24576
    except (TypeError, ValueError, AssertionError):
        return await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ 0‚Äë24576, –Ω–∞–ø—Ä–∏–º–µ—Ä /set_budget 4096")
    sess = get_session(msg.from_user.id)
    sess["thinking_budget"] = value
    await msg.answer(f"thinkingBudget = {value}")

@dp.message(Command("search"))
async def cmd_search(msg: types.Message, command: Command):
    if not command.args:
        return await msg.answer("/search <–∑–∞–ø—Ä–æ—Å>")
    await msg.chat.do("typing")
    result = await google_search(command.args)
    await msg.answer(result)

# ---- Text & image handler ----------------------------------------------------
@dp.message(F.photo | F.text)
async def handle_any(msg: types.Message):
    sess = get_session(msg.from_user.id)
    chat = sess["chat"]

    # Build content parts
    parts = []

    if msg.text:
        parts.append({"text": msg.text})

    if msg.photo:
        photo = msg.photo[-1]
        buf = BytesIO()
        await bot.download(photo, buf)
        buf.seek(0)
        parts.append({"mime_type": "image/jpeg", "data": buf.read()})

    cfg = {
        "temperature": sess["temperature"],
        "top_p": sess["top_p"],
        "thinkingBudget": sess["thinking_budget"],
    }

    await msg.chat.do("typing")
    response = chat.send_message(parts, generation_config=cfg)

    thinking = getattr(response, "thinking", None)
    if thinking:
        await msg.answer("üí≠ " + thinking)

    await msg.answer(response.text)

# ---- Main entry --------------------------------------------------------------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.error("Bot stopped!")
